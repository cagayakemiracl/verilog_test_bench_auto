import os.path
import os
import re
import math

class Test_bench:
    def __init__(self, file_name):
        self.sorce_file = file_name;
        self.base, ext = os.path.splitext(self.sorce_file)
        self.dest_file = self.base + "_test.v"
        self.dump_file = self.base + ".vcd"
        self.bit_sum = 1
        self.argl = []
        self.inputl = []
        self.clk = False

        self.analysis()
        self.output_file()

    def split(self, match, string):
        tmp = re.split(match, string)
        while(True):
            try:
                tmp.remove("")
            except ValueError:
                break

        return tmp

    def list2str(self, list):
        return reduce(lambda x, y: x + ", " + y, list)

    def print_type(self, type, line):
        line = line.strip()
        print "type is %s '%s'" % (type, line)
        return line.replace(type, "").strip()

    def analysis(self):
        target = False
        with open(self.dest_file, 'w') as f:
            f.write("""/*
\tThis program has been automatically generated by the following script.
\thttps://github.com/cagayakemiracl/verilog_test_bench_auto
\tThank you!!
*/
module test_bench ();
""")
            with open(self.sorce_file, 'r') as f2:
                for line in f2:
                    if "input" in line and target:
                        bit_num = 0
                        line = self.print_type("input", line)
                        f.write("\treg  %s\n" % line)
                        attr = self.split(",|;|\s", line)
                        if re.match("^\[", attr[0]):
                            bit_list = map(int, self.split("\[|:|\]", attr[0]))
                            bit_num = 2 ** (int(math.fabs(bit_list[0] - bit_list[1])) + 1)
                            attr.pop(0)
                        else:
                            bit_num = 2

                        self.argl += attr
                        if "clk" in attr:
                            self.clk = True
                            attr.pop(attr.index("clk"))

                        self.bit_sum *= bit_num ** len(attr)
                        self.inputl += attr
                        print attr
                        print bit_num
                        print self.bit_sum
                    elif "output" in line and target:
                        line = self.print_type("output", line)
                        f.write("\twire %s\n" % line)
                        attr = self.split(",|;|\s", line)
                        if re.match("^\[", attr[0]):
                            attr.pop(0)

                        self.argl += attr
                    elif "endmodule" in line and target:
                        self.print_type("endmodule", line)
                        break
                    elif "module" in line:
                        line = self.print_type("module", line)
                        tmp = self.split("\s", line)
                        name = tmp[0]
                        print name
                        if self.base == name:
                            target = True

                    else:
                        self.print_type("bat strings", line)

        self.args = self.list2str(self.argl)
        self.inputs = self.list2str(self.inputl)
        print self.args
        print self.inputs

    def output_file(self):
        with open(self.dest_file, 'a') as f:
            if self.clk:
                f.write("""
\talways #5 clk <= !clk;
\tinitial clk = 0;
""")

            f.write('''
\t%s i0 (%s);

\tinitial begin
\t\t$dumpfile ("%s");
\t\t$dumpvars (0, test_bench);
\t\t$monitor  ("%%t''' % (self.base, self.args, self.dump_file))
            for attr in self.argl:
                f.write(" %s = %%b" % attr)

            f.write('", $time, %s);\n' % self.args)
            for attr in self.inputl:
                f.write("\t\t%s = 0;\n" % attr)

            f.write("""
\t\trepeat (%d) begin
\t\t\t#10;
\t\t\t{%s} = {%s} + 1;
\t\tend // repeat (%d) begin
\t\t$finish;
\tend // initial begin
endmodule // test_bench
""" % (self.bit_sum, self.inputs, self.inputs, self.bit_sum))

    def compile_file(self):
        os.system("iverilog %s %s" % (self.sorce_file, self.dest_file))

    def exec_file(self):
        os.system("vvp a.out")

    def rm_aout(self):
        os.system("rm a.out")

    def run(self):
        self.compile_file()
        self.exec_file()
        self.rm_aout()
